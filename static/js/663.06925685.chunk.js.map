{"version":3,"file":"static/js/663.06925685.chunk.js","mappings":"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","sources":["components/molecules/PriceSale/index.tsx","components/templates/OrderDetail/index.tsx","pages/TrackingOrder/index.tsx","services/order/index.ts"],"sourcesContent":["import React from 'react';\n\nimport Typography from 'components/atoms/Typography';\nimport mapModifiers, { renderPrice, roundingPrice } from 'utils/functions';\n\ninterface PriceSaleProps {\n  promo?: number;\n  price: number;\n  unit: string;\n  isHorizontal?: boolean;\n  bigger?: boolean;\n}\n\nconst PriceSale: React.FC<PriceSaleProps> = ({\n  promo, price, unit, isHorizontal, bigger\n}) => (\n  <div className={mapModifiers('m-priceSale', isHorizontal && 'horizontal')}>\n    <div className=\"m-priceSale_original\">\n      <Typography.Text modifiers={promo ? [bigger ? '16x18' : '12x14', 'black3', '500', 'lineThrough'] : [bigger ? '18x21' : '14x16', '700']}>\n        {renderPrice(price, true, unit)}\n      </Typography.Text>\n    </div>\n    {!!promo && promo > 0 && (\n      <div className=\"m-priceSale_sale\">\n        <Typography.Text modifiers={[bigger ? '18x21' : '14x16', '700']}>\n          {renderPrice(roundingPrice(price * (100 - promo) / 100), true, unit)}\n        </Typography.Text>\n      </div>\n    )}\n  </div>\n);\n\nPriceSale.defaultProps = {\n  promo: undefined,\n};\n\nexport default PriceSale;\n","import React from 'react';\n\nimport Link from 'components/atoms/Link';\nimport Typography from 'components/atoms/Typography';\nimport PriceSale from 'components/molecules/PriceSale';\nimport { OrderData } from 'services/order/types';\nimport { getDayString, renderPrice } from 'utils/functions';\n\nconst OrderDetail: React.FC<OrderData> = ({\n  code,\n  city,\n  district,\n  ward,\n  name,\n  phone,\n  email,\n  address,\n  note,\n  createdAt,\n  items\n}) => (\n  <div className=\"t-orderDetail\">\n    <Typography.Text>\n      Đơn hàng\n      {' '}\n      <Typography.Text type=\"span\" modifiers={['700']}>\n        #\n        {code}\n      </Typography.Text>\n      {' '}\n      đã đặt vào\n      {' '}\n      <strong>{getDayString(new Date(createdAt))}</strong>\n    </Typography.Text>\n    <table>\n      <thead>\n        <td><Typography.Text modifiers={['700']}>Sản phẩm</Typography.Text></td>\n        <td><Typography.Text modifiers={['700']}>Tổng cộng</Typography.Text></td>\n      </thead>\n      <tbody>\n        {items.map((item) => (\n          <tr key={item.product.slug + item.product.name}>\n            <td>\n              <Typography.Text>\n                <Link href={item.product.slug}>{item.product.name}</Link>\n                {' '}\n                <strong>\n                  x\n                  {item.quantity}\n                </strong>\n              </Typography.Text>\n            </td>\n            <td><PriceSale unit=\"VNĐ\" promo={item.salePercent} price={item.price} /></td>\n          </tr>\n        ))}\n        <tr>\n          <td><Typography.Text modifiers={['700']}>Tổng đơn</Typography.Text></td>\n          <td>\n            <Typography.Text modifiers={['700']}>{renderPrice(items.reduce((prev, curr) => prev + curr.finalPrice, 0), true, 'VNĐ')}</Typography.Text>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <div className=\"t-orderDetail_shipping\">\n      <div className=\"t-orderDetail_line\">\n        <Typography.Text>\n          Tên:\n          {' '}\n          <strong>\n            {' '}\n            {name}\n          </strong>\n        </Typography.Text>\n      </div>\n      <div className=\"t-orderDetail_line\">\n        <Typography.Text>\n          SĐT:\n          {' '}\n          <strong>{phone}</strong>\n        </Typography.Text>\n      </div>\n      <div className=\"t-orderDetail_line\">\n        <Typography.Text>\n          Email:\n          {' '}\n          <strong>{email}</strong>\n        </Typography.Text>\n      </div>\n      <div className=\"t-orderDetail_line\">\n        <Typography.Text>\n          Địa chỉ:\n          {' '}\n          <strong>\n            {address}\n            ,\n            {' '}\n            {ward.name}\n            ,\n            {' '}\n            {district.name}\n            ,\n            {' '}\n            {city.name}\n          </strong>\n        </Typography.Text>\n      </div>\n      <div className=\"t-orderDetail_line\">\n        <Typography.Text>\n          Ghi chú:\n          {' '}\n          {note}\n        </Typography.Text>\n      </div>\n    </div>\n  </div>\n);\n\nexport default OrderDetail;\n","import React from 'react';\nimport { useQuery } from 'react-query';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Loading from 'components/atoms/Loading';\nimport Typography from 'components/atoms/Typography';\nimport Container from 'components/organisms/Container';\nimport Section from 'components/organisms/Section';\nimport OrderDetail from 'components/templates/OrderDetail';\nimport { getOrderDetailService } from 'services/order';\n\nconst TrackingOrder: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const orderCode = searchParams.get('code');\n  const { data: detail, isLoading } = useQuery(\n    ['getOrderDetail', orderCode],\n    () => {\n      if (orderCode) {\n        return getOrderDetailService(orderCode);\n      }\n      return undefined;\n    }\n  );\n  if (isLoading) {\n    return <Loading isShow />;\n  }\n\n  return (\n    <Section>\n      <Container>\n        {detail ? <OrderDetail {...detail} /> : <Typography.Text modifiers={['center']}>Không tìm thấy đơn hàng</Typography.Text>}\n      </Container>\n    </Section>\n  );\n};\n\nexport default TrackingOrder;\n","import { CreateOrderDataRequest, OrderData } from './types';\n\nimport axiosInstance from 'services/common/instance';\n\nexport const getAllOrderService = async (params: BaseFilterParams):\n  Promise<APIPaginationResponse<OrderData[]>> => {\n  const response = await axiosInstance.get('client/orders', { params });\n  return response.data;\n};\n\nexport const getOrderDetailService = async (code: string): Promise<OrderData> => {\n  const response = await axiosInstance.get(`client/orders/${code}`);\n  return response.data.data;\n};\n\nexport const createOrderService = async (data: CreateOrderDataRequest): Promise<void> => {\n  await axiosInstance.post('client/orders/create-order', data);\n};\n\nexport const createOrderUnAuthService = async (data: CreateOrderDataRequest): Promise<void> => {\n  await axiosInstance.post('client/orders/create-order-without-auth', data);\n};\n"],"names":["PriceSale","promo","price","unit","isHorizontal","bigger","className","mapModifiers","modifiers","renderPrice","roundingPrice","defaultProps","undefined","code","city","district","ward","name","phone","email","address","note","createdAt","items","type","getDayString","Date","map","item","href","product","slug","quantity","salePercent","reduce","prev","curr","finalPrice","useSearchParams","orderCode","get","useQuery","getOrderDetailService","detail","data","isLoading","isShow","getAllOrderService","params","axiosInstance","response","createOrderService","createOrderUnAuthService"],"sourceRoot":""}