{"version":3,"file":"static/js/599.afba55d0.chunk.js","mappings":"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","sources":["components/atoms/TextArea/index.tsx","components/organisms/Modal/index.tsx","pages/Checkout/index.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\n\nimport Typography from '../Typography';\n\nimport mapModifiers from 'utils/functions';\n\nexport interface TextAreaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  error?: string;\n  label?: string;\n}\n\nconst TextAreaRef: React.ForwardRefRenderFunction<HTMLTextAreaElement, TextAreaProps> = ({\n  label, error, placeholder, rows, id, required, ...innerProps\n}, ref) => (\n  <div className={mapModifiers(\n    'a-textarea',\n    error && 'error',\n  )}\n  >\n    {label && (\n      <label htmlFor={id} className=\"a-input_label\">\n        <Typography.Text type=\"span\" modifiers={['14x16']}>{label}</Typography.Text>\n        {required && <Typography.Text type=\"span\" modifiers={['14x16', 'ferrariRed']}>*</Typography.Text>}\n      </label>\n    )}\n    <div className=\"a-textarea_wrap\">\n      <textarea\n        {...innerProps}\n        className=\"a-textarea_input\"\n        placeholder={placeholder}\n        rows={rows}\n        ref={ref}\n      />\n    </div>\n    {error && (\n      <span className={mapModifiers('a-textarea_error')}>{error}</span>\n    )}\n  </div>\n);\n\nconst TextArea = forwardRef(TextAreaRef);\n\nexport default TextArea;\n","import React from 'react';\nimport Modal from 'react-modal';\n\nimport Button from 'components/atoms/Button';\nimport mapModifiers from 'utils/functions';\n\nexport type VariantModal = 'default' | 'notification' | 'maxWith428' | 'shipping';\n\ninterface ModalProps {\n  isOpen: boolean;\n  handleClose?: () => void;\n  variant?: VariantModal;\n  children?: React.ReactNode;\n  showIconClose?: boolean;\n  modifiers?: string[];\n}\n\nconst CustomModal: React.FC<ModalProps> = ({\n  isOpen,\n  handleClose,\n  variant,\n  children,\n  showIconClose,\n  modifiers,\n}) => (\n  <Modal\n    isOpen={isOpen}\n    onRequestClose={handleClose}\n    closeTimeoutMS={250}\n    className={mapModifiers('o-modal', variant)}\n    ariaHideApp={false}\n    portalClassName={mapModifiers('o-modal_portal', isOpen && 'open')}\n    overlayClassName={mapModifiers('o-modal_overlay', variant)}\n  >\n    <div className=\"o-modal_main\">\n      <div className={mapModifiers('o-modal_wrapper', modifiers)}>\n        {handleClose && showIconClose\n          && (\n            <div className=\"o-modal_close\">\n              <Button iconName=\"close\" variant=\"whiteBorder\" iconSize=\"16\" handleClick={handleClose} />\n            </div>\n          )}\n        <div className=\"o-modal_body\">{children}</div>\n      </div>\n    </div>\n  </Modal>\n);\n\nCustomModal.defaultProps = {\n  children: undefined,\n};\n\nexport default CustomModal;\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { Controller, FormProvider, useForm } from 'react-hook-form';\nimport { useMutation } from 'react-query';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport Button from 'components/atoms/Button';\nimport Input from 'components/atoms/Input';\nimport Select from 'components/atoms/Select';\nimport TextArea from 'components/atoms/TextArea';\nimport Typography from 'components/atoms/Typography';\nimport Container from 'components/organisms/Container';\nimport CustomModal from 'components/organisms/Modal';\nimport Section from 'components/organisms/Section';\nimport useDidMount from 'hooks/useDidMount';\nimport ShippingAddressList from 'pages/Account/ShippingAddress';\nimport { removeItemCartService } from 'services/cart';\nimport {\n  getLocationCitiesService, getLocationDistrictsService,\n  getLocationWardsService\n} from 'services/location';\nimport { createOrderService, createOrderUnAuthService } from 'services/order';\nimport { CreateOrderDataRequest } from 'services/order/types';\nimport { ShippingAddressData } from 'services/shippingAddress/types';\nimport { deleteCheckoutId } from 'store/cart';\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\nimport { LOCALSTORAGE, ROUTES_PATH } from 'utils/constants';\nimport { renderPrice } from 'utils/functions';\nimport { orderSchema } from 'utils/schemas';\n\ntype OrderForm = Omit<CreateOrderDataRequest, 'items'>;\n\nconst Checkout: React.FC = () => {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const { checkoutId, items } = useAppSelector((state) => state.cart);\n  const profile = useAppSelector((state) => state.auth.profile);\n  const [isOpen, setIsOpen] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  const orderMethod = useForm<OrderForm>({\n    resolver: yupResolver(orderSchema),\n  });\n\n  const watchCity = orderMethod.watch('cityId');\n  const watchDistrict = orderMethod.watch('districtId');\n\n  const checkoutItems = useMemo(() => (items.filter((\n    item\n  ) => checkoutId.includes(item.id))), [checkoutId, items]);\n\n  const totalCost = useMemo(() => checkoutItems.reduce((prev, curr) => prev\n    + (curr.price * curr.quantity), 0), [checkoutItems]);\n\n  const { mutate: getCitiesMutate, data: cities } = useMutation(\n    'getCitiesAction',\n    (countryId: number) => getLocationCitiesService(countryId),\n  );\n\n  const { mutate: getDistrictsMutate, data: districts } = useMutation(\n    'getDistrictsAction',\n    (cityId: number) => getLocationDistrictsService(cityId),\n  );\n\n  const { mutate: getWardsMutate, data: wards } = useMutation(\n    'getWardsAction',\n    (districtId: number) => getLocationWardsService(districtId),\n  );\n\n  const { mutate: removeItemCartMutate } = useMutation(\n    'removeItemCartAction',\n    removeItemCartService,\n  );\n\n  const { mutate: createOrderMutate, isLoading } = useMutation(\n    'createOrderAction',\n    profile ? createOrderService : createOrderUnAuthService,\n    {\n      onSuccess: () => {\n        setSuccess(true);\n        dispatch(deleteCheckoutId());\n        if (profile) {\n          removeItemCartMutate(checkoutId);\n        } else {\n          const cartLocal = localStorage.getItem(LOCALSTORAGE.NICI_CART);\n          const cartData = cartLocal ? JSON.parse(cartLocal) as CartItem[] : [];\n          localStorage.setItem(\n            LOCALSTORAGE.NICI_CART,\n            JSON.stringify(cartData.filter((item) => !checkoutId.includes(item.id)))\n          );\n        }\n      },\n      onError: () => {\n        toast.error('Đã có lỗi xảy ra. Vui lòng thử lại sau!', { toastId: 'orderFail' });\n      }\n    }\n  );\n\n  const handleSelectAddress = (address: ShippingAddressData) => {\n    orderMethod.setValue('cityId', address.city.id);\n    orderMethod.setValue('districtId', address.district.id);\n    orderMethod.setValue('wardId', address.ward.id);\n    orderMethod.setValue('address', address.address);\n    orderMethod.setValue('phone', address.phone);\n    orderMethod.setValue('name', address.name);\n    setIsOpen(false);\n  };\n\n  const orderAction = async () => {\n    const valid = await orderMethod.trigger();\n    if (valid) {\n      const information = orderMethod.getValues();\n      createOrderMutate({\n        ...information,\n        items: checkoutItems.map((item) => ({\n          productId: item.productId,\n          sizeId: item.size.id,\n          colorId: item.color.id,\n          quantity: item.quantity\n        }))\n      });\n    }\n  };\n\n  useDidMount(() => {\n    getCitiesMutate(1);\n  });\n\n  useEffect(() => {\n    getDistrictsMutate(watchCity);\n  }, [getDistrictsMutate, orderMethod, watchCity]);\n\n  useEffect(() => {\n    getWardsMutate(watchDistrict);\n  }, [getWardsMutate, orderMethod, watchDistrict]);\n\n  return (\n    <Section>\n      <div className=\"p-checkout\">\n        <Container>\n          {success ? (\n            <>\n              <div className=\"p-checkout_success\">\n                <div className=\"p-checkout_success-icon\">\n                  <div className=\"p-checkout_success-icon_tip\" />\n                  <div className=\"p-checkout_success-icon_long\" />\n                </div>\n              </div>\n              <Typography.Text modifiers={['mayGreen', '700', '20x24', 'center']}>Đặt hàng thành công</Typography.Text>\n              <div className=\"p-checkout_button continue\">\n                <Button variant=\"primary\" sizes=\"h48\" handleClick={() => navigate(ROUTES_PATH.HOME)}>Tiếp tục mua hàng</Button>\n              </div>\n            </>\n          ) : (\n            <FormProvider {...orderMethod}>\n              <Row>\n                <Col lg={8} className=\"p-checkout_address\">\n                  <div className=\"p-checkout_address_title\">\n                    <Typography.Heading type=\"h3\" modifiers={['18x21']}>Địa chỉ giao hàng</Typography.Heading>\n                    {profile && (\n                      <Button iconName=\"location\" iconSize=\"20\" handleClick={() => setIsOpen(true)}>\n                        <Typography.Text modifiers={['16x18', '500']}>Chọn địa chỉ đã lưu</Typography.Text>\n                      </Button>\n                    )}\n                  </div>\n                  <div className=\"p-account_field\">\n                    <Controller\n                      name=\"name\"\n                      control={orderMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Input name=\"name\" required label=\"Tên người nhận\" type=\"text\" value={value} bordered onChange={onChange} error={error?.message} />\n                      )}\n                    />\n                  </div>\n                  <div className=\"p-account_field\">\n                    <Controller\n                      name=\"phone\"\n                      control={orderMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Input name=\"phone\" required label=\"Số điện thoại\" type=\"text\" value={value} bordered onChange={onChange} error={error?.message} />\n                      )}\n                    />\n                  </div>\n                  <div className=\"p-account_field\">\n                    <Controller\n                      name=\"cityId\"\n                      control={orderMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Select\n                          name=\"cityId\"\n                          placeholder=\"---\"\n                          label=\"Tỉnh / Thành phố\"\n                          options={cities || []}\n                          modifier={['bordered']}\n                          required\n                          value={cities?.find((item) => item.value === value)}\n                          handleSelect={(option) => onChange(option.value)}\n                          error={error?.message}\n                        />\n                      )}\n                    />\n                  </div>\n                  <div className=\"p-account_field\">\n                    <Controller\n                      name=\"districtId\"\n                      control={orderMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Select\n                          name=\"districtId\"\n                          placeholder=\"---\"\n                          label=\"Quận / Huyện\"\n                          options={districts || []}\n                          modifier={['bordered']}\n                          required\n                          value={districts?.find((item) => item.value === value)}\n                          handleSelect={(option) => onChange(option.value)}\n                          error={error?.message}\n                        />\n                      )}\n                    />\n                  </div>\n                  <div className=\"p-account_field\">\n                    <Controller\n                      name=\"wardId\"\n                      control={orderMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Select\n                          name=\"wardId\"\n                          placeholder=\"---\"\n                          label=\"Phường / Xã\"\n                          options={wards || []}\n                          modifier={['bordered']}\n                          required\n                          value={wards?.find((item) => item.value === value)}\n                          handleSelect={(option) => onChange(option.value)}\n                          error={error?.message}\n                        />\n                      )}\n                    />\n                  </div>\n                  <div className=\"p-account_field\">\n                    <Controller\n                      name=\"address\"\n                      control={orderMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Input name=\"address\" required label=\"Địa chỉ\" type=\"text\" value={value} bordered onChange={onChange} error={error?.message} />\n                      )}\n                    />\n                  </div>\n                  <div className=\"p-checkout_line\">\n                    <Controller\n                      name=\"email\"\n                      control={orderMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Input name=\"email\" required label=\"Email\" type=\"text\" value={value} bordered onChange={onChange} error={error?.message} />\n                      )}\n                    />\n                  </div>\n                  <div className=\"p-checkout_line\">\n                    <Controller\n                      name=\"note\"\n                      control={orderMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <TextArea required name=\"note\" label=\"Ghi chú\" rows={6} value={value} onChange={onChange} error={error?.message} />\n                      )}\n                    />\n                  </div>\n                </Col>\n                <Col lg={4} className=\"p-checkout_info\">\n                  <div className=\"p-checkout_total\">\n                    <Typography.Heading type=\"h3\" modifiers={['18x21']}>Chi tiết đơn hàng</Typography.Heading>\n                    <div className=\"p-checkout_summary\">\n                      <Typography.Text modifiers={['13x16', '600']}>Sản phẩm</Typography.Text>\n                      <Typography.Text modifiers={['13x16', '600']}>Giá</Typography.Text>\n                    </div>\n                    <div className=\"p-checkout_divider\" />\n                    {checkoutItems.map((item) => (\n                      <div className=\"p-checkout_summary\" key={item.id}>\n                        <div className=\"p-checkout_product\">\n                          <Typography.Text modifiers={['13x16', '700']}>\n                            {item.name}\n                            {' '}\n                            x\n                            {' '}\n                            {item.quantity}\n                          </Typography.Text>\n                          <Typography.Text modifiers={['14x16']} type=\"span\">\n                            Color:\n                            {' '}\n                            {item.color.name}\n                          </Typography.Text>\n                          <Typography.Text modifiers={['14x16']} type=\"span\">\n                            , Size:\n                            {' '}\n                            {item.size.name}\n                          </Typography.Text>\n                        </div>\n                        <div className=\"p-checkout_price\">\n                          <Typography.Text modifiers={['15x18', '600']}>{renderPrice(item.price * item.quantity, true, 'VNĐ')}</Typography.Text>\n                        </div>\n                      </div>\n                    ))}\n                    <div className=\"p-checkout_divider\" />\n                    <div className=\"p-checkout_summary\">\n                      <Typography.Text modifiers={['13x16']}>Tổng tiền sản phẩm</Typography.Text>\n                      <Typography.Text modifiers={['15x18', '600']}>{renderPrice(totalCost, true, 'VNĐ')}</Typography.Text>\n                    </div>\n                    <div className=\"p-checkout_divider\" />\n                    <div className=\"p-checkout_summary\">\n                      <Typography.Text modifiers={['13x16']}>Giảm giá</Typography.Text>\n                      <Typography.Text modifiers={['15x18', '600']}>0 VNĐ</Typography.Text>\n                    </div>\n                    <div className=\"p-checkout_divider\" />\n                    <div className=\"p-checkout_summary\">\n                      <Typography.Text modifiers={['13x16']}>Tổng đơn hàng</Typography.Text>\n                      <Typography.Text modifiers={['15x18', '600']}>{renderPrice(totalCost, true, 'VNĐ')}</Typography.Text>\n                    </div>\n                    <div className=\"p-checkout_button\">\n                      <Button\n                        variant=\"primary\"\n                        loading={isLoading}\n                        sizes=\"h48\"\n                        handleClick={orderAction}\n                      >\n                        Đặt hàng\n                      </Button>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            </FormProvider>\n          )}\n        </Container>\n      </div>\n      <CustomModal isOpen={isOpen} variant=\"shipping\" showIconClose handleClose={() => setIsOpen(false)}>\n        <ShippingAddressList isModal handleSelectAddress={handleSelectAddress} />\n      </CustomModal>\n    </Section>\n  );\n};\n\nexport default Checkout;\n"],"names":["TextAreaRef","ref","label","error","placeholder","rows","id","required","innerProps","className","mapModifiers","htmlFor","type","modifiers","TextArea","forwardRef","CustomModal","isOpen","handleClose","variant","children","showIconClose","onRequestClose","closeTimeoutMS","ariaHideApp","portalClassName","overlayClassName","Button","iconName","iconSize","handleClick","defaultProps","undefined","navigate","useNavigate","dispatch","useAppDispatch","useAppSelector","state","cart","checkoutId","items","profile","auth","useState","setIsOpen","success","setSuccess","orderMethod","useForm","resolver","yupResolver","orderSchema","watchCity","watch","watchDistrict","checkoutItems","useMemo","filter","item","includes","totalCost","reduce","prev","curr","price","quantity","useMutation","countryId","getLocationCitiesService","getCitiesMutate","mutate","cities","data","cityId","getLocationDistrictsService","getDistrictsMutate","districts","districtId","getLocationWardsService","getWardsMutate","wards","removeItemCartMutate","removeItemCartService","createOrderService","createOrderUnAuthService","onSuccess","deleteCheckoutId","cartLocal","localStorage","getItem","LOCALSTORAGE","cartData","JSON","parse","setItem","stringify","onError","toast","toastId","createOrderMutate","isLoading","orderAction","trigger","information","getValues","map","productId","sizeId","size","colorId","color","useDidMount","useEffect","Section","Container","Typography","sizes","ROUTES_PATH","Row","Col","lg","name","control","render","field","onChange","value","fieldState","Input","bordered","message","Select","options","modifier","find","handleSelect","option","renderPrice","loading","ShippingAddress","isModal","handleSelectAddress","address","setValue","city","district","ward","phone"],"sourceRoot":""}