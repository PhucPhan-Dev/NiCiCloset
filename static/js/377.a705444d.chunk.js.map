{"version":3,"file":"static/js/377.a705444d.chunk.js","mappings":"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","sources":["pages/Authenticate/index.tsx","utils/schemas.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Controller, FormProvider, useForm } from 'react-hook-form';\nimport { useMutation } from 'react-query';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport Button from 'components/atoms/Button';\n// import Checkbox from 'components/atoms/Checkbox';\nimport Input from 'components/atoms/Input';\nimport Link from 'components/atoms/Link';\nimport Typography from 'components/atoms/Typography';\nimport Section from 'components/organisms/Section';\nimport { loginService, registerService, registerVerifyEmailService } from 'services/authenticate';\nimport { LoginDataRequest, RegisterDataRequest } from 'services/authenticate/types';\nimport { addToCartService } from 'services/cart';\nimport { setAccessToken, setRefreshToken } from 'services/common/storage';\nimport { getProfileAction } from 'store/authenticate';\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\nimport { ERROR_MAPPING, LOCALSTORAGE, ROUTES_PATH } from 'utils/constants';\nimport mapModifiers from 'utils/functions';\nimport { loginSchema, registerSchema } from 'utils/schemas';\n\nconst Authenticate: React.FC = () => {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const [isLogin, setIsLogin] = useState(true);\n  const [verified, setVerified] = useState(false);\n  const profile = useAppSelector((state) => state.auth.profile);\n\n  /* lOGIN */\n  const loginMethod = useForm<LoginDataRequest>({\n    resolver: yupResolver(loginSchema),\n  });\n\n  const { mutate: addToCartMutate, isLoading: syncCartLoading } = useMutation(\n    'syncToCartAction',\n    addToCartService,\n    {\n      onSuccess: () => {\n        localStorage.removeItem(LOCALSTORAGE.NICI_CART);\n      },\n      onSettled: () => {\n        navigate(ROUTES_PATH.HOME);\n      }\n    }\n  );\n\n  const { mutate: loginMutate, isLoading: loginLoading } = useMutation(\n    'loginAction',\n    loginService,\n    {\n      onSuccess: (data) => {\n        toast.success('Đăng nhập thành công!', { toastId: 'loginSuccess' });\n        setAccessToken(data.accessToken);\n        setRefreshToken(data.refreshToken);\n        dispatch(getProfileAction());\n        const cartLocal = localStorage.getItem(LOCALSTORAGE.NICI_CART);\n        const cartData = cartLocal ? JSON.parse(cartLocal) as CartItem[] : [];\n        if (cartData.length > 0) {\n          addToCartMutate(cartData.map((item) => ({\n            productId: item.productId,\n            sizeId: item.size.id,\n            colorId: item.color.id,\n            quantity: item.quantity\n          })));\n        } else {\n          navigate(ROUTES_PATH.HOME);\n        }\n      },\n      onError: (errors: any) => {\n        if (errors.length > 0) {\n          errors.forEach((ele: ErrorResponse) => {\n            loginMethod.setError('password', { message: ERROR_MAPPING[ele.message] || 'Thông tin chưa đúng' });\n          });\n        } else {\n          toast.error('Đã có lỗi xảy ra!', { toastId: 'loginFail' });\n        }\n      }\n    }\n  );\n\n  const loginAction = async (data: LoginDataRequest) => {\n    loginMutate(data);\n  };\n\n  const handleLogin = async () => {\n    const isPassed = await loginMethod.trigger();\n    if (isPassed) {\n      const data = loginMethod.getValues();\n      loginMutate(data);\n    }\n  };\n\n  /* REGISTER */\n  const registerMethod = useForm<RegisterDataRequest & { verifyCode: string }>({\n    resolver: yupResolver(registerSchema),\n  });\n\n  const { mutate: registerMutate, isLoading: registerLoading } = useMutation(\n    'registerAction',\n    registerService,\n    {\n      onSuccess: () => {\n        setVerified(true);\n      },\n      onError: (errors: any) => {\n        if (errors.length > 0) {\n          errors.forEach((ele: ErrorResponse) => {\n            registerMethod.setError(ele.field as any, { message: ERROR_MAPPING[ele.message] });\n          });\n        } else {\n          toast.error('Đã có lỗi xảy ra!', { toastId: 'registerFail' });\n        }\n      }\n    }\n  );\n\n  const { mutate: verifyEmailMutate, isLoading: verifyLoading } = useMutation(\n    'verifyEmailAction',\n    registerVerifyEmailService,\n    {\n      onSuccess: () => {\n        toast.success('Chúc mừng bạn đã đăng ký tài khoản thành công!', { toastId: 'verifySuccess' });\n        setVerified(false);\n        setIsLogin(true);\n      },\n      onError: (errors: any) => {\n        if (errors.length > 0) {\n          errors.forEach((ele: ErrorResponse) => {\n            registerMethod.setError(ele.field as any, { message: ERROR_MAPPING[ele.message] || 'Thông tin chưa đúng' });\n          });\n        } else {\n          toast.error('Đã có lỗi xảy ra!', { toastId: 'registerFail' });\n        }\n      }\n    }\n  );\n\n  const registerAction = useCallback(async (\n    data: RegisterDataRequest & { verifyCode: string }\n  ) => {\n    if (verified) {\n      if (!data.verifyCode) {\n        registerMethod.setError('verifyCode', { message: 'Vui lòng nhập mã xác thực' });\n      }\n      verifyEmailMutate(data.verifyCode);\n    } else {\n      registerMutate(data);\n    }\n  }, [registerMethod, registerMutate, verified, verifyEmailMutate]);\n\n  const handleRegister = async () => {\n    const isPassed = await registerMethod.trigger();\n    if (isPassed) {\n      const data = registerMethod.getValues();\n      registerMutate(data);\n    }\n  };\n\n  useEffect(() => {\n    if (profile) {\n      navigate('/account');\n    }\n  }, [navigate, profile]);\n\n  return (\n    <Section>\n      <div className=\"p-authenticate\">\n        <div className=\"p-authenticate_tabs\">\n          <div className={mapModifiers('p-authenticate_btnLogin', isLogin && 'active')}>\n            <Button handleClick={() => setIsLogin(true)}>\n              <Typography.Text modifiers={['18x21', '700', 'uppercase']}>Đăng nhập</Typography.Text>\n            </Button>\n          </div>\n          <div className={mapModifiers('p-authenticate_btnRegister', !isLogin && 'active')}>\n            <Button handleClick={() => setIsLogin(false)}>\n              <Typography.Text modifiers={['18x21', '700', 'uppercase']}>Đăng ký</Typography.Text>\n            </Button>\n          </div>\n        </div>\n        <div className=\"p-authenticate_content\">\n          <div className={mapModifiers('p-authenticate_login', isLogin && 'active')}>\n            <FormProvider {...loginMethod}>\n              <div className=\"p-authenticate_field\">\n                <Controller\n                  name=\"email\"\n                  control={loginMethod.control}\n                  render={({\n                    field: { onChange, value },\n                    fieldState: { error },\n                  }) => (\n                    <Input name=\"email\" required label=\"Email\" type=\"text\" value={value} bordered onChange={onChange} error={error?.message} />\n                  )}\n                />\n              </div>\n              <div className=\"p-authenticate_field\">\n                <Controller\n                  name=\"password\"\n                  control={loginMethod.control}\n                  render={({\n                    field: { onChange, value },\n                    fieldState: { error },\n                  }) => (\n                    <Input\n                      name=\"password\"\n                      required\n                      label=\"Mật khẩu\"\n                      type=\"password\"\n                      value={value}\n                      bordered\n                      onChange={onChange}\n                      error={error?.message}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          handleLogin();\n                        }\n                      }}\n                    />\n                  )}\n                />\n              </div>\n              {/* <div className=\"p-authenticate_field\">\n              <Checkbox name=\"isRemember\">Ghi nhớ</Checkbox>\n            </div> */}\n              <div className=\"p-authenticate_button\">\n                <Button type=\"submit\" variant=\"primary\" loading={loginLoading || syncCartLoading} sizes=\"h42\" handleClick={loginMethod.handleSubmit(loginAction)}>\n                  <Typography.Text modifiers={['15x18', '500', 'uppercase']}>Đăng nhập</Typography.Text>\n                </Button>\n              </div>\n            </FormProvider>\n            {/* <div className=\"p-authenticate_forgot\">\n              <Link><Typography.Text modifiers={['14x16', 'ferrariRed']}>\n              Quên mật khẩu?</Typography.Text></Link>\n            </div> */}\n          </div>\n          <div className={mapModifiers('p-authenticate_register', !isLogin && 'active')}>\n            <FormProvider {...registerMethod}>\n              {verified ? (\n                <div className=\"p-authenticate_field\">\n                  <div className=\"p-authenticate_message\">\n                    <Typography.Text modifiers={['12x14', 'cadetGrey', 'center']}>\n                      Chúng tôi đã gửi một mã xác thực đến Email:\n                      {' '}\n                      <Typography.Text type=\"span\" modifiers={['ferrariRed', '500']}>{registerMethod.getValues('email')}</Typography.Text>\n                      <br />\n                      Vui lòng nhập mã xác thực để kích hoạt tài khoản.\n                    </Typography.Text>\n                  </div>\n                  <Controller\n                    name=\"verifyCode\"\n                    control={registerMethod.control}\n                    render={({\n                      field: { onChange, value },\n                      fieldState: { error },\n                    }) => (\n                      <Input prefix=\"NICI-\" required label=\"Mã xác thực\" type=\"text\" value={value} bordered onChange={onChange} error={error?.message} />\n                    )}\n                  />\n                </div>\n              ) : (\n                <>\n                  <div className=\"p-authenticate_field\">\n                    <Controller\n                      name=\"fullName\"\n                      control={registerMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Input name=\"fullName\" required label=\"Họ và tên\" type=\"text\" value={value} bordered onChange={onChange} error={error?.message} />\n                      )}\n                    />\n                  </div>\n                  <div className=\"p-authenticate_field\">\n                    <Controller\n                      name=\"phone\"\n                      control={registerMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Input name=\"phone\" required label=\"Số điện thoại\" type=\"text\" value={value} bordered onChange={onChange} error={error?.message} />\n                      )}\n                    />\n                  </div>\n                  <div className=\"p-authenticate_field\">\n                    <Controller\n                      name=\"email\"\n                      control={registerMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Input name=\"email\" required label=\"Email\" type=\"text\" value={value} bordered onChange={onChange} error={error?.message} />\n                      )}\n                    />\n                  </div>\n                  <div className=\"p-authenticate_field\">\n                    <Controller\n                      name=\"password\"\n                      control={registerMethod.control}\n                      render={({\n                        field: { onChange, value },\n                        fieldState: { error },\n                      }) => (\n                        <Input\n                          name=\"password\"\n                          required\n                          label=\"Mật khẩu\"\n                          type=\"password\"\n                          value={value}\n                          bordered\n                          onChange={onChange}\n                          error={error?.message}\n                          onKeyDown={(e) => {\n                            if (e.key === 'Enter') {\n                              handleRegister();\n                            }\n                          }}\n                        />\n                      )}\n                    />\n                  </div>\n                </>\n              )}\n              <div className=\"p-authenticate_button\">\n                <Button type=\"submit\" loading={registerLoading || verifyLoading} variant=\"primary\" sizes=\"h42\" handleClick={registerMethod.handleSubmit(registerAction)}>\n                  <Typography.Text modifiers={['15x18', '500', 'uppercase']}>{verified ? 'Xác thực' : 'Đăng ký'}</Typography.Text>\n                </Button>\n              </div>\n            </FormProvider>\n          </div>\n        </div>\n      </div>\n    </Section>\n  );\n};\n\nexport default Authenticate;\n","import * as yup from 'yup';\n\nexport const phoneRegExp = /(84|0[3|5|7|8|9])+([0-9]{8})\\b/;\n\nexport const loginSchema = yup.object({\n  email: yup.string().required('Vui lòng nhập lại địa chỉ email').email('Email không hợp lệ'),\n  password: yup.string().required('Vui lòng nhập mật khẩu'),\n});\n\nexport const registerSchema = yup.object({\n  fullName: yup.string().required('Vui lòng nhập họ tên'),\n  phone: yup.string().required('Vui lòng nhập số điện thoại').matches(phoneRegExp, 'Số điện thoại không hợp lệ'),\n  email: yup.string().required('Vui lòng nhập lại địa chỉ email').email('Email không hợp lệ'),\n  password: yup.string().required('Vui lòng nhập mật khẩu').min(6, 'Mật khẩu phải chứa ít nhất 6 kí tự'),\n});\n\nexport const shippingAddressSchema = yup.object({\n  phone: yup.string().required('Vui lòng nhập số điện thoại').matches(phoneRegExp, 'Số điện thoại không hợp lệ'),\n  address: yup.string().required('Vui lòng nhập địa chỉ'),\n  name: yup.string().required('Vui lòng nhập tên'),\n  cityId: yup.number().required('Vui lòng chọn tỉnh / thành phố'),\n  districtId: yup.number().required('Vui lòng chọn quận / huyện'),\n  wardId: yup.number().required('Vui lòng chọn phường / xã'),\n});\n\nexport const updateProfileSchema = yup.object({\n  fullName: yup.string().required('Vui lòng nhập họ tên'),\n  phone: yup.string().required('Vui lòng nhập số điện thoại').matches(phoneRegExp, 'Số điện thoại không hợp lệ'),\n});\n\nexport const changePasswordSchema = yup.object({\n  oldPassword: yup.string().required('Vui lòng nhập mật khẩu'),\n  password: yup.string().required('Vui lòng nhập mật khẩu mới'),\n  confirmPassword: yup.string().required('Vui lòng nhập xác nhận mật khẩu mới').oneOf([yup.ref('password')], 'Mật khẩu xác nhận không trùng khớp'),\n});\n\nexport const orderSchema = yup.object({\n  cityId: yup.number().required('Vui lòng chọn tỉnh / thành phố'),\n  districtId: yup.number().required('Vui lòng chọn quận / huyện'),\n  wardId: yup.number().required('Vui lòng chọn phường / xã'),\n  address: yup.string().required('Vui lòng nhập địa chỉ'),\n  name: yup.string().required('Vui lòng nhập họ và tên'),\n  phone: yup.string().required('Vui lòng nhập số điện thoại').matches(phoneRegExp, 'Số điện thoại không hợp lệ'),\n  email: yup.string().required('Vui lòng nhập lại địa chỉ email').email('Email không hợp lệ'),\n});\n\nexport const buyForMeSchema = yup.object({\n  fullname: yup.string().required('Vui lòng nhập họ tên'),\n  phone: yup.string().required('Vui lòng nhập số điện thoại').matches(phoneRegExp, 'Số điện thoại không hợp lệ'),\n  email: yup.string().required('Vui lòng nhập lại địa chỉ email').email('Email không hợp lệ'),\n});\n\nexport const contactScheme = yup.object({\n  name: yup.string().required('Vui lòng nhập họ tên'),\n  email: yup.string().required('Vui lòng nhập lại địa chỉ email').email('Email không hợp lệ'),\n  subject: yup.string().required('Vui lòng nhập chủ để'),\n  message: yup.string().required('Vui lòng để lại lời nhắn')\n});\n"],"names":["navigate","useNavigate","dispatch","useAppDispatch","useState","isLogin","setIsLogin","verified","setVerified","profile","useAppSelector","state","auth","loginMethod","useForm","resolver","yupResolver","loginSchema","useMutation","addToCartService","onSuccess","localStorage","removeItem","LOCALSTORAGE","onSettled","ROUTES_PATH","addToCartMutate","mutate","syncCartLoading","isLoading","loginService","data","toast","toastId","setAccessToken","accessToken","setRefreshToken","refreshToken","getProfileAction","cartLocal","getItem","cartData","JSON","parse","length","map","item","productId","sizeId","size","id","colorId","color","quantity","onError","errors","forEach","ele","setError","message","ERROR_MAPPING","loginMutate","loginLoading","loginAction","handleLogin","trigger","getValues","registerMethod","registerSchema","registerService","field","registerMutate","registerLoading","registerVerifyEmailService","verifyEmailMutate","verifyLoading","registerAction","useCallback","verifyCode","handleRegister","useEffect","className","mapModifiers","handleClick","modifiers","name","control","render","onChange","value","error","fieldState","required","label","type","bordered","onKeyDown","e","key","variant","loading","sizes","handleSubmit","prefix","phoneRegExp","yup","email","password","fullName","phone","matches","min","shippingAddressSchema","address","cityId","districtId","wardId","updateProfileSchema","changePasswordSchema","oldPassword","confirmPassword","oneOf","orderSchema","buyForMeSchema","fullname","contactScheme","subject"],"sourceRoot":""}